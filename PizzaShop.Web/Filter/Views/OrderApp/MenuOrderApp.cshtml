@{
    Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
    ViewData["Title"] = "Menu";
}

@model PizzaShop.Entity.ViewModel.OrderAppMenuViewModel
<style>
    #sidebar-menu {
        width: 250px !important;
        background-color: white;
        height: 600px;

    }

    #sidebar-category {
        color: #4C5556;
        font-weight: 500;
    }

    .sidebar-menu-cat {
        height: 45px;
        cursor: pointer;

    }

    .selected-cat-menu {
        background-color: #0066A8 !important;
        color: white;
        border-style: none solid none none;
        border-top-right-radius: 30px;
        border-end-end-radius: 30px;
    }

    .t-veg {
        background-color: #2aa34f;
    }

    .t-non {
        background-color: #ca240e;
    }

    .t-vegan {
        background-color: #f39e4f;
    }

    .modifier-card.selected {
        background-color: #d3d3d3;
    }
</style>
<div class="content w-100 d-flex">
    <div class="d-flex flex-column align-items-start py-3 px-0 h-100 d-xl-block d-none fs-5" id="sidebar-menu">
        <h5 class="ms-3 ps-2 mb-3">Category</h5>
        <ul class="nav nav-pills flex-column mb-auto align-items-start w-100 h-100 cur-point " id="sidebar-category">
            <li class="d-flex justify-content-start align-items-center nav-item mb-2 sidebar-menu-cat ps-4 w-100"
                data-category-id="-1">
                <p class="ms-1  d-inline m-0">Favorite Items</p>
            </li>
            <li class="d-flex justify-content-start align-items-center nav-item mb-2 sidebar-menu-cat selected-cat-menu ps-4 w-100"
                data-category-id="0">
                <p class="ms-1 d-inline m-0">All</p>
            </li>
            @foreach (var category in Model.Categories)
            {
                <li class="d-flex justify-content-start align-items-center nav-item mb-2 sidebar-menu-cat ps-4 w-100"
                    data-category-id="@category.CategoryId">
                    <p class="ms-1 d-inline m-0">@category.CategoryName</p>
                </li>
            }
        </ul>
    </div>

    <div class="m-3 col">
        <div class="d-sm-flex justify-content-between align-items-center mb-4">
            <div class="col-10 col-sm-4">

                <div class="input-group ">
                    <input type="text" class="form-control search-or-cus" id="searchBox" placeholder="Search" />
                    <span class="input-group-text"><i class="fa fa-search" aria-hidden="true"></i></span>
                </div>
            </div>
            <div class="d-xl-flex d-none  gap-3 ms-auto flex-wrap">
                <div class="d-flex align-items-center">
                    <span class="rounded-circle d-inline-block t-veg me-2" style="height: 12px; width: 12px;"></span>
                    <p class="m-0">Vegetarian</p>
                </div>
                <div class="d-flex align-items-center">
                    <span class="rounded-circle d-inline-block t-non me-2" style="height: 12px; width: 12px;"></span>
                    <p class="m-0">Non-Vegetarian</p>
                </div>
                <div class="d-flex align-items-center">
                    <span class="rounded-circle d-inline-block t-vegan me-2" style="height: 12px; width: 12px;"></span>
                    <p class="m-0">Vegan</p>
                </div>
            </div>
            <div class="d-flex mt-2">
                <div class="dropdown d-xl-none me-5 rounded" style="background-color: white;">
                    <button class="btn fs-3 dropdown-toggle hd-cl" type="button" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        Category
                    </button>
                    <ul class="dropdown-menu" style="height: 60vh;">
                        <div class="d-flex gap-3">
                            <h4 class="fs-5 ms-4 c-color">Category</h4>
                        </div>
                        <li class="d-flex justify-content-start align-items-center nav-item mb-2 sidebar-menu-cat ps-4 w-100"
                            data-category-id="-1">
                            <p class="ms-1  d-inline m-0">Favorite Items</p>
                        </li>
                        <li class="d-flex justify-content-start align-items-center nav-item mb-2 sidebar-menu-cat selected-cat-menu ps-4 w-100"
                            data-category-id="0">
                            <p class="ms-1 d-inline m-0">All</p>
                        </li>
                        @foreach (var category in Model.Categories)
                        {
                            <li class="nav-item d-flex justify-content-start dropdown-item align-items-center mb-2 sidebar-menu-cat ps-4 w-100 item"
                                data-category-id="@category.CategoryId">
                                <p class="ms-1 d-inline m-0">@category.CategoryName</p>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="d-flex d-xl-none d-block gap-3 me-auto flex-wrap mt-0 mb-2 ms-2">
            <div class="d-flex align-items-center">
                <span class="rounded-circle d-inline-block t-veg me-2" style="height: 12px; width: 12px;"></span>
                <p class="m-0">Vegetarian</p>
            </div>
            <div class="d-flex align-items-center">
                <span class="rounded-circle d-inline-block t-non me-2" style="height: 12px; width: 12px;"></span>
                <p class="m-0">Non-Vegetarian</p>
            </div>
            <div class="d-flex align-items-center">
                <span class="rounded-circle d-inline-block t-vegan me-2" style="height: 12px; width: 12px;"></span>
                <p class="m-0">Vegan</p>
            </div>
        </div>
        <div class="d-flex flex-wrap gap-3 justify-content-center justify-content-lg-start" id="item-container">
        </div>
    </div>
    @if (ViewBag.Id != 0)
    {
        <div class="col-lg-4" id="OrderPartial">
            <input type="hidden" value="@ViewBag.Id" id="orderId">
            @* <partial name="./PartialView/_OrderPartial" /> *@
        </div>
    }
</div>



<div id="modifierSelection"></div>
<div id="CustomerDetailDivModal"></div>
<div id="OrderWiseCommentDivModal"></div>
<div id="ItemWiseCommentDivModal"></div>
<div id="ConfirmationModalDiv"></div>
<div id="CustomerReviewDiv"></div>
<div id="CancelModalDiv"></div>


<script>

    var currentModifiers = [];
    var currentItemId = 0;
    var orderItems = [];

    var orderId =@ViewBag.Id;

    function loadItemsByCategory(categoryId, searchQuery = '') {
        $.ajax({
            url: '/OrderApp/loadItemsByCategory',
            method: 'GET',
            data: {
                categoryId: categoryId,
                searchQuery: searchQuery
            },
            success: function (res) {
                $('#item-container').html(res);
            }
        });
    }

    function OrderPartial(orderId) {

        $.ajax({
            url: '/OrderApp/OrderPartial',
            method: 'GET',
            data: {
                orderId: orderId
            },
            success: function (res) {
                $('#OrderPartial').html(res);
            }
        });
    }

    $(document).on("submit", "#Confirmation", function (event) {
        event.preventDefault();
        var orderId = parseInt($('#Orderid').val());
        var customerId =parseInt($('#CustomerId').val());
 
        $.ajax({
            type: "POST",
            url: "/OrderApp/CompleteOrder",
            data: {
                orderId: orderId,
                customerId: customerId
            },
            success: function (response) {
                
                $('#ConfirmationModalToggle').modal('hide'); 
                $('#CustomerReviewDiv').html(response); 
                $('#CustomerReviewModel').modal('show'); 
                   
                if (response.success == false) {
                    toastr.error("Error Updating Comment");
                }
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
            }
        });
 
    });

    $(document).ready(function () {
        loadItemsByCategory(categoryId = 0, searchQuery = "");
        OrderPartial(orderId);
        $('.nav-item.sidebar-menu-cat').click(function () {
            $('.nav-item.sidebar-menu-cat').removeClass('selected-cat-menu');
            $(this).addClass('selected-cat-menu');

            const categoryId = $(this).data('category-id');
            const searchQuery = $('#searchBox').val() || '';

            loadItemsByCategory(categoryId, searchQuery);
        });

        $("#searchBox").on('input', function () {
            const searchQuery = $(this).val();
            const categoryId = $('.selected-cat-menu').data('category-id');
            loadItemsByCategory(categoryId, searchQuery);
        })

        $(document).on("click", ".item-card", function () {

            var itemid = $(this).data('itemid');
            var orderId = @ViewBag.Id;
            currentItemId = itemid;
            var itemName = $(this).data('itemname');
            var itemType = $(this).data('itemtype');
            var itemPrice = $(this).find(".price-item").data('itemprice');
            var ItemTax = $(this).find(".price-item").data('itemtax');


            $.ajax({
                url: '/OrderApp/GetModifierDetails',
                method: 'GET',
                data: {
                    itemId: itemid,
                    orderId: orderId
                },
                success: function (res) {

                    $("#modifierSelection").html(res);
                    $("#CategoryItemNameCard").text(itemName);
                    $("#categoryItemPrice").text(itemPrice);
                    $("#categoryItemTax").text(ItemTax);


                    if (itemType == "veg") {
                        $(".modifier-card").addClass("bg-success");
                    } else if (itemType == "non-veg") {
                        $(".modifier-card").addClass("bg-danger");
                    } else {
                        $(".modifier-card").addClass("bg-warning");
                    }
                    $("#add-modifiers-modal").modal("show");
                    currentModifiers = [];

                }
            });

        })

    });

    $(document).on("click", ".remove-item-btn", function () {
        let itemId = $(this).closest("tr").data('item-id');
        currentOrder = currentOrder.filter(item => item.id !== itemId);
        updateOrderUI();
    });



    let currentOrder = [];
    let existingIndex = 0

    function addToOrder(item) {


        existingIndex = orderItems.findIndex(oi =>
            oi.ItemId === item.ItemId &&
            JSON.stringify(oi.modifiers.map(m => m.modId).sort()) === JSON.stringify(item.modifiers.map(m => m.id).sort())
        );

        if (existingIndex >= 0) {
            orderItems[existingIndex].quantity++;
        } else {
            orderItems.push(item);
        }



        updateOrderUI();
    }


    function updateOrderUI() {

        const $tbody = $('table tbody');
        $tbody.empty();

        if (orderItems.length == 0) {
            const $row1 = (`<tr id="no-order-message" >
                            <td colspan="10" class="text-center p-5">No Order</td>
                        </tr>
             `)
            $tbody.append($row1)
        }

        var subtotal = 0;
        var OtherTax = 0;


        orderItems.forEach(item => {

            // Calculate item total
            const modifiersTotal = item.modifiers.reduce((sum, mod) => sum + mod.price, 0) * item.quantity;
            const itemTotal = (item.price) * item.quantity + modifiersTotal;
            subtotal += itemTotal;

            // Calculate OtherTax 
            const categoryTax = (parseFloat(item.ItemTax) * parseFloat(item.price) / 100) * item.quantity;
            OtherTax += categoryTax;

            // Create modifiers HTML
            const modifiersHtml = item.modifiers.map(mod => `
            <li class="gap-2 modifier-item-new" data-modifier-id=${mod.id}>
                <span class="modifier-name-new">${mod.name}</span>
                <span class="modifier-price-new">${mod.price} ₹</span>
            </li>
            `).join('');


            // Create row with collapsible modifiers
            const $row = $(`
         <tr class="p-2 NewOrderItem" style="border:2px solid rgb(67, 65, 65); border-radius: 7px;" data-id=${item.ItemId} data-orderid=${item.orderId} >
            <td colspan="6">
                <i class="bi bi-chevron-compact-down toggle-modifiers" style="cursor:pointer"></i>
                <span class="item-name itemWiseComment " id="#ItemName-${item.ItemId}"  data-id=${item.ItemId} data-orderid=${item.orderId}>${item.name}</span>
                <span class="item-tax" hidden  id="#ItemTax-${item.ItemId}">${item.ItemTax}</span>
                <div class="modifiers-container" style="display:none; margin-top:10px;">
                    ${modifiersHtml}
                </div>
            </td>
            <td>
                <div class="p-2 d-flex justify-content-around align-items-center quantity-control" style="border:2px solid rgb(67, 65, 65); border-radius: 7px;">
                    <i class="bi bi-dash"  data-id ="${item.orderDetailId}"></i>
                    <span class="quantity" id="TotalQuantity-${item.ItemId}">${item.quantity}</span>
                    <i class="bi bi-plus-lg" data-id ="${item.orderDetailId}"></i>
                </div>
            </td>
            <td>
                <div class="d-flex flex-column">
                    <span id="ItemPrice-${item.ItemId}">${item.price * item.quantity} ₹</span>
                    <span>${modifiersTotal}</sapn>
                </div>
            </td>
            <td>
                <i class="bi bi-trash deleteitem1"></i>
            </td>
            </tr>
            `);

            $row.find('.toggle-modifiers').click(function () {
                const $icon = $(this);
                const $modifiersContainer = $icon.closest('td').find('.modifiers-container');

                $modifiersContainer.toggle();

                if ($modifiersContainer.is(':visible')) {
                    $icon.removeClass('bi-chevron-compact-down').addClass('bi-chevron-compact-up');
                } else {
                    $icon.removeClass('bi-chevron-compact-up').addClass('bi-chevron-compact-down');
                }
            });

            $row.find('.bi-dash').click((e) => {

                var orderDetailId = item.orderDetailId;
                $.ajax({
                    type: "POST",
                    url: "/OrderApp/ReduceOrderItemQuantity",
                    data: {
                        orderDetailId: orderDetailId,
                    },
                    success: function (response) {


                        if (item.quantity >= response) {
                            if (item.quantity > 1) {
                                item.quantity--;
                                updateOrderUI();
                            }
                        }
                        else {
                            toastr.error("Quantity is Already Prepared");
                        }
                        console.log("Quantity updated successfully");
                    },
                    error: function (error) {
                        console.error("Error updating quantity:", error);
                    }
                });
            });

            $row.find('.bi-plus-lg').click((e) => {

                var orderId = item.orderId;
                $.ajax({
                    type: "POST",
                    url: "/OrderApp/CheckOrderStatus",
                    data: {
                        orderId: orderId,
                    },
                    success: function (response) {

                        if (response != "Completed") {
                            item.quantity++;
                        }
                        else {
                            toastr.error("Order is Already Completed");
                        }

                    },
                    error: function (error) {
                        console.error("Error updating quantity:", error);
                    }
                });
                updateOrderUI();
            });

            // Add delete handler
            $row.find('.deleteitem1').click(() => {

                var orderDetailId = item.orderDetailId;
                $.ajax({
                    type: "POST",
                    url: "/OrderApp/ReduceOrderItemQuantity",
                    data: {
                        orderDetailId: orderDetailId,
                    },
                    success: function (response) {

                        if (response >= 1) {
                            toastr.error("Item is Already Prepared");
                        }
                        else {
                            toastr.success("Item Deleted Successfully");
                            $row.remove();
                            orderItems = orderItems.filter(oi => oi !== item);
                            updateOrderUI();
                        }

                    },
                    error: function (error) {
                        console.error("Error updating quantity:", error);
                    }
                });

            });

            $tbody.append($row);

        });

        $('#subtotal').text(`${subtotal.toFixed(2)}`);
        $('#other').text(`${OtherTax.toFixed(2)}₹`);
        CalculateTax();
    }

    $(document).on("click", ".saveBtn", function () {

        const orderId = @ViewBag.Id;
        orderItemsString = JSON.stringify(orderItems);
        var TotalAmount = parseFloat($("#total-amount").text().replace("₹", ""));


        $.ajax({
            url: '/OrderApp/SaveOrder',
            method: 'POST',
            data: {
                orderId: orderId,
                orderItemsString: orderItemsString,
                TotalAmount: TotalAmount
            },
            success: function (res) {
                toastr.success("Order saved successfully");
                // Handle success response
            }
        });
    });

    $(document).on("click", ".completeBtn", function () {

        const orderId = @ViewBag.Id;
        let customerId = $(this).data("customerid");

        $.ajax({
            url: '/OrderApp/CheckCompleteOrder',
            method: 'POST',
            data: {
                orderId: orderId,
                customerId: customerId
            },
            success: function (res) {

                if (res.success == false) {
                    toastr.error("Order is Not Ready");
                }
                else if (res) {
                    $("#ConfirmationModalDiv").html(res);
                    $("#ConfirmationModalToggle").modal("show");
                }


            }
        });

    });
    $(document).on("click", ".cancelBtn", function () {

        const orderId = @ViewBag.Id;
        let customerId = $(this).data("customer-id");

        $.ajax({
            url: '/OrderApp/CancelOrderModal',
            method: 'POST',
            data: {
                orderId: orderId,
                customerId: customerId
            },
            success: function (res) {

                if (res.success == false) {
                    toastr.error("Order is AllReady ready");
                }
                else if (res) {
                    $("#CancelModalDiv").html(res);
                    $("#CancelOrderModalToggle").modal("show");
                }
            }
        });

    });



    $(document).on("click", ".itemWiseComment", function () {

        var itemId = $(this).data("id");
        var orderId = $(this).data("orderid");
        $.ajax({
            type: "GET",
            url: "/OrderApp/GetItemWiseComment",
            data: {
                itemId: itemId,
                orderId: orderId
            },
            success: function (response) {

                $("#ItemWiseCommentDivModal").html(response);
                $("#itemWiseCommentModel").modal("show");
            },
            error: function (error) {
                console.error("Error loading customer details:", error);
            }
        });

    });

</script>