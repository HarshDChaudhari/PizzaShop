@model PizzaShop.Entity.ViewModel.OrderAppWaitingListViewModel
<div class="table-responsive shadow my-3">
    <table class="table table-white">
        <thead>
            <tr>
                <th class="text-secondary text-nowrap"># Token No</th>
                <th class="text-secondary text-nowrap">Created At</th>
                <th class="text-secondary text-nowrap">Waiting Time</th>
                <th class="text-secondary text-nowrap">Name</th>
                <th class="text-secondary text-nowrap">No. of Persons</th>
                <th class="text-secondary text-nowrap">Phone Number</th>
                <th class="text-secondary text-nowrap">Email</th>
                <th class="text-secondary text-nowrap">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var details in Model.WaitingList)
            {
                <tr>
                    <td>
                        #@details.WaitingId
                    </td>
                    <td>
                        @details.CreatedAt
                    </td>
                    @* <td>
                        @{
                            var WaitingTime = DateTime.Now - details.CreatedAt;
                        }
                        @($"{(int)WaitingTime.TotalHours} hrs {WaitingTime.Minutes} min")
                    </td> *@
                    <td class="live-time-waiting" data-time="@details.CreatedAt.ToString("o")">
                    </td>
                    <td>
                        @details.UserName
                    </td>
                    <td>
                        @details.NoOfPerson
                    </td>
                    <td>
                        @details.PhoneNumber
                    </td>
                    <td>
                        @details.Email
                    </td>
                    <td class="text-nowrap">
                        <button class="EditTokenBtn btn p-0" data-tokenId="@details.WaitingId"><i
                                class="fa-solid fa-pencil">
                            </i></button>
                        <button class="DeleteTokenBtn btn p-0 ms-2" data-bs-toggle="modal"
                            data-bs-target="#TokenDeleteModal" data-tokenid="@details.WaitingId"><i
                                class="fa-regular fa-trash-can"></i></button>
                        <button class="AssignTableIcon btn p-0 ms-2" data-tokenid="@details.WaitingId"
                            data-id="@details.SectionId" data-capacity="@details.NoOfPerson">
                            <i class="bi bi-person-check"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (Model.WaitingList.Count() < 1)
    {
        <div class="fw-bold text-secondary fs-5 text-center my-4">No Such Details Found</div>
    }
</div>


<!-- Modal -->
@* <div class="modal fade" id="EditWaitingToken" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div id="LoadAddEditWaitingTokenModal">
            @* @ waiting token modal will load here @ 
        </div>
    </div>
</div> *@


<script>
    $(document).ready(function () {
        function updateTime() {
            $(".live-time-waiting").each(function () {

                var dateString = "";
                var time = $(this).data("time");
                if (!time) {
                    $(this).text("0 Min");
                    return;
                }
                var date1 = new Date(time);
                var date2 = new Date();
                var diff = date2.getTime() - date1.getTime();
                var days = Math.floor(diff / (1000 * 60 * 60 * 24));
                diff -= days * (1000 * 60 * 60 * 24);
                if (days > 0) {
                    dateString += days + " days ";
                }
                var hours = Math.floor(diff / (1000 * 60 * 60));
                diff -= hours * (1000 * 60 * 60);
                if (hours > 0) {
                    dateString += hours + " hours ";
                }
                var mins = Math.floor(diff / (1000 * 60));
                diff -= mins * (1000 * 60);
                if (mins > 0) {
                    dateString += mins + " min ";
                }
                var seconds = Math.floor(diff / (1000));
                diff -= seconds * (1000);
                dateString += seconds + " sec";
                $(this).text(dateString);
            });
        }

        setInterval(updateTime, 1000);
    });
</script>