@{
    ViewData["Title"] = "Menu Page";
}
@model PizzaShop.Entity.ViewModel.MenuViewModel

<style>
    .tabs {
        width: 93px;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
        color: #000;
        font-weight: 500;
        padding: 10px 20px;
        border: none;
    }

    .tabs.active {
        background-color: rgba(40, 46, 46, 0.157);
        color: #0F67B1;
        font-weight: 700;
    }

    .category-table-section {
        padding: 20px;
    }

    .category-table-section {
        height: 200px;
    }
</style>

<main>
    <!-- content-box  -->
    <!-- header  -->
    <h1 class="text-primary">Menu</h1>
    <!-- Box Section  -->
    <div class="d-flex gap-2 flex-column">
        <!-- tabs -->
        <div class=" d-flex flex-row  shadow bg-white  mb-0">
            <ul class="nav nav-tabs gap-3 ps-3 ms-3 " id="myTab" role="tablist">
                <li class="nav-item p-0" role="presentation">
                    <button class="btn d-flex align-items-center justify-content-center tabs p-2 active  " id="tab-1"
                        data-bs-toggle="tab" data-bs-target="#tab-11" type="button" role="tab" aria-controls="tab-11"
                        aria-selected="true">
                        <div>
                            <i class="bi bi-list-check"></i>
                            <span>Items</span>
                        </div>
                    </button>
                    <!-- <button class="" >Tab 1</button> -->
                </li>
                <li class="nav-item p-0" role="presentation">
                    <button class=" btn tabs d-flex justify-content-center align-items-center p-2" id="tab-2"
                        data-bs-toggle="tab" data-bs-target="#tab-22" type="button" role="tab" aria-controls="tab-22"
                        aria-selected="false">
                        <div class="d-flex align-items-center justify-content-center gap-1">
                            <i class="bi bi-ui-checks-grid"></i>
                            <span>Modifiers</span>
                        </div>
                    </button>
                </li>
            </ul>
        </div>
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="tab-11" role="tabpanel" aria-labelledby="tab-1">
                <div class=" category-table-section   ">
                    <partial name="./PartialView/Category" />
                </div>
            </div>
            <div class="tab-pane fade" id="tab-22" role="tabpanel" aria-labelledby="tab-2">
                <div class="category-table-section  ">
                    <partial name="./PartialView/Modifier" />
                </div>

            </div>

        </div>
    </div>
</main>

<div id="addCategoryItemsModal"></div>
<div id="editCategoryItemsModal"></div>
<div id="addModifierItemsModal"></div>

<script>

    @* Category List  start*@

        // Function to load modifier groups
        $(document).on('click', '.edit-btn-categoryItem', function () {

            var itemId = $(this).data('item-id');

            $.ajax({
                url: '/Menu/GetEditCategoryItemModal',
                type: 'GET',
                success: function (data) {

                    console.log(data);
                    $('#editCategoryItemsModal').html(data);
                    $('#editItemId').val(itemId);
                    $('#editModalCategoryItems').modal('show');
                }
            });
        });

    // Adding change event listener with ID-based selection
    document.addEventListener('change', function (event) {
        if (event.target.classList.contains('modifier-checkbox')) {
            let checkbox = event.target; // No need for jQuery
            let modifierId = checkbox.value;
            let modifierName = document.querySelector(`label[for='${checkbox.id}']`).textContent.trim();

            if (checkbox.checked) {
                console.log("Adding Modifier:", modifierId, modifierName);
                selectedModifierGroups.push({ id: modifierId, name: modifierName });
                addModifierSection(modifierId, modifierName);
            } else {
                removeModifierGroup(modifierId);
            }
        }
    });


    document.addEventListener('click', function (event) {
        if (event.target.closest(".delete-group")) {
            let button = event.target.closest(".delete-group");
            let modifierId = button.getAttribute("data-group-id");

            console.log("Deleting Modifier Group:", modifierId);

            // Update the checkbox state and remove the group
            let checkbox = document.querySelector(`.modifier-checkbox[value='${modifierId}']`);
            if (checkbox) {
                checkbox.checked = false;
            }
            removeModifierGroup(modifierId);
        }
    });

    // Function to remove modifier group
    function removeModifierGroup(modifierId) {
        console.log("Removing Modifier:", modifierId);
        selectedModifierGroups = selectedModifierGroups.filter(m => m.id !== modifierId);
        const groupElement = document.querySelector(`#group-${modifierId}`);
        if (groupElement) {
            groupElement.remove();
        }
    }


    // Function to add a modifier section
    function addModifierSection(modifierId, modifierName) {

        console.log("Adding Modifier Section:", modifierId, modifierName);

        $.ajax({
            url: "/Menu/GetModifierItemDetails",
            type: "GET",
            dataType: "json",
            data: { modifierGroupId: modifierId },
            success: function (data) {

                let htmlContent = `
                <div class="modifier-group-add-container mt-3" id="group-${modifierId}">
                    <div class="modifier-group-header d-flex justify-content-between">
                        <div>
                            <strong>${modifierName}</strong>
                            <select class="add-modifier-qty addQuantityMin form-select" id="MinimumValue">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                            </select>
                        </div>
                        <div>
                            <button class="delete-group btn" data-group-id="${modifierId}">
                                <i class="bi bi-trash"></i>
                            </button>
                            <select class="add-modifier-qty addQuantityMax form-select" id="MaximumValue">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                            </select>
                        </div>
                    </div>
                    <div class="modifier-items">
                    `

                data.forEach(modifier => {
                    htmlContent +=
                        `<div class="modifier-item d-flex justify-content-between">
                                <div>${modifier.modifierItemName}</div>
                                <div>
                                <span class="modifier-price">â‚¹${modifier.rate}</span>
                                </div>
                            </div>`;
                });
                htmlContent += `
                    </div>
                </div>`;

                document.querySelector("#addModifierContainer").insertAdjacentHTML('beforeend', htmlContent);
            },
            error: function () {
                toastr.error("Error loading modifiers.");
            }
        });
    }

    $(document).on("change", ".add-modifier-qty", function () {

        let minValue = $(this).closest(".modifier-group-add-container").find(".addQuantityMin").val();
        let maxValue = $(this).closest(".modifier-group-add-container").find(".addQuantityMax").val();
        if (parseInt(minValue) > parseInt(maxValue)) {
            toastr.error("Minimum value cannot be greater than Maximum value");
            $(".addQuantityMin").val(1);
        }
    });

    $(document).on('click', ".addModifierItemBtn", function () {
        

        $.ajax({
            url: '/Menu/GetAddModifierItemModal',
            type: 'GET',
            success: function (data) {
                
                $('#addModifierItemsModal').html(data);
                $('#addModifierItem').modal('show');
            },
            error: function (error) {
                console.error('Error fetching item details:', error);
            }
        });
    })


    function updateSelectedModifiersDisplayEdit(ModifierGroupId) {
        
        $.ajax({
            url: '/Menu/allModifierItemsByModifierGroupId',
            type: 'GET',
            data: { ModifierGroupId: ModifierGroupId },
            success: function (data) {
                
                EditSelectedModifiers = data.map(item => ({
                    modifierItemId: item.modifierItemId,
                    modifierItemName: item.modifierItemName
                }));

                arr = [...EditSelectedModifiers];

                updateSelectedModifiersDisplayEditDisplay(EditSelectedModifiers);

            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error, xhr);
            }

        });
    }




    @* edit0 *@

        function editLoadModifierGroups(selectedModifiers) {
            $.ajax({
                url: '/Menu/GetAllModifier',
                type: 'GET',
                dataType: 'json',
                success: function (data) {

                    const dropdownMenu = document.querySelector('.editModifierDropDown');
                    dropdownMenu.innerHTML = '';
                    document.querySelector("#editModifierContainer").innerHTML = '';



                    data.forEach(modifier => {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `
                            <div class="form-check">
                                <input class="form-check-input edit-modifier-checkbox" type="checkbox" value="${modifier.modifierGroupId}" 
                                id="checkbox-${modifier.modifierGroupId}" >
                                <input type="hidden" id="modifierGroupId" value="${modifier.modifierGroupId}">
                                <label class="form-check-label" for="checkbox-${modifier.modifierGroupId}">
                                    ${modifier.modifierName} 
                                </label>
                            </div>`;
                        dropdownMenu.appendChild(listItem);

                        if (selectedModifiers.some(selected => selected.modifierGroupId === modifier.modifierGroupId)) {
                            listItem.querySelector('input[type="checkbox"]').checked = true;

                            editModifierSection(modifier.modifierGroupId, modifier.modifierName);
                        } else {
                            listItem.querySelector('input[type="checkbox"]').checked = false;
                        }

                    });
                },
                error: function (xhr, status, error) {

                    console.error("AJAX Error:", status, error);
                    $("#EditSelectModifierInItem").html('<option value="-1">Failed to load categories</option>');
                }
            });
        }

    document.addEventListener('change', function (event) {
        if (event.target.classList.contains('edit-modifier-checkbox')) {
            let checkbox = event.target; // No need for jQuery
            let modifierId = parseInt(checkbox.value);
            let modifierName = document.querySelector(`label[for='${checkbox.id}']`).textContent.trim();

            if (checkbox.checked) {
                console.log("Adding Modifier:", modifierId, modifierName);
                selectedModifierGroupEdit.push({ id: modifierId, name: modifierName });
                editModifierSectionForAdd(modifierId, modifierName);
            } else {
                removeModifierGroup(modifierId);
            }
        }

    });


    document.addEventListener('click', function (event) {
        if (event.target.closest(".edit-delete-group")) {
            let button = event.target.closest(".edit-delete-group");
            let modifierId = button.getAttribute("data-group-id");

            console.log("Deleting Modifier Group:", modifierId);

            // Update the checkbox state and remove the group
            let checkbox = document.querySelector(`.modifier-checkbox[value='${modifierId}']`);
            if (checkbox) {
                checkbox.checked = false;
            }
            removeModifierGroup(modifierId);
        }
    });




    function editModifierSectionForAdd(modifierId, modifierName) {

        console.log("Adding Modifier Section:", modifierId, modifierName);

        $.ajax({
            url: "/Menu/GetModifierItemDetails",
            type: "GET",
            dataType: "json",
            data: { modifierGroupId: modifierId },
            success: function (data) {

                let htmlContent = `
                <div class="modifier-group-edit-container mt-3" id="group-${modifierId}">
                    <div class="modifier-group-header d-flex justify-content-between">
                        <div>
                            <strong>${modifierName}</strong>
                            <select class="edit-modifier-qty editQuantityMin form-select" id="MinimumValue">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                            </select>
                        </div>
                        <div>
                            <button class="delete-group btn" data-group-id="${modifierId}">
                                <i class="bi bi-trash"></i>
                            </button>
                            <select class="edit-modifier-qty editQuantityMax form-select" id="MaximumValue">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                            </select>
                        </div>
                    </div>
                    <div class="modifier-items">
                    `

                data.forEach(modifier => {
                    htmlContent +=
                        `<div class="modifier-item d-flex justify-content-between">
                                <div>${modifier.modifierItemName}</div>
                                <div>
                                <span class="modifier-price">â‚¹${modifier.rate}</span>
                                </div>
                            </div>`;
                });
                htmlContent += `
                    </div>
                </div>`;
                document.querySelector("#editModifierContainer").insertAdjacentHTML('beforeend', htmlContent);
            },
            error: function () {
                toastr.error("Error loading modifiers.");
            }
        });
    }

    $(document).on("change", ".edit-modifier-qty", function () {

        let minValue = $(this).closest(".modifier-group-edit-container").find(".editQuantityMin").val();
        let maxValue = $(this).closest(".modifier-group-edit-container").find(".editQuantityMax").val();
        @* let minValue = $(".addQuantityMin").val();
        let maxValue = $(".addQuantityMax").val(); *@
        if (parseInt(minValue) > parseInt(maxValue)) {
            toastr.error("Minimum value cannot be greater than Maximum value");
            $(".editQuantityMin").val(1);
        }
    });


    function editModifierSection(modifierGroupId, modifierName) {
        $.ajax({
            url: "/Menu/GetModifierItemDetails",
            type: "GET",
            dataType: "json",
            data: { modifierGroupId: modifierGroupId },
            success: function (data) {

                selectedModifierGroupEdit.push({ id: modifierGroupId, name: modifierName });

                for (var i = 0; i < data.length; i++) {
                    var minValue = data[i].minValue || 0;
                    var maxValue = data[i].maxValue || 0;
                }



                let htmlContent = `
                    <div class="modifier-group-edit-container mt-3" id="group-${modifierGroupId}">
                        <div class="modifier-group-header d-flex justify-content-between">
                            <div>
                                <strong>${modifierName}</strong>
                                <select class="edit-modifier-qty editQuantityMin form-select" id="MinimumValue">`;
                for (let i = 1; i <= 3; i++) {
                    htmlContent +=
                        `
                                <option value="${i}" ${minValue == i ? 'selected' : ''}>${i}</option>
                                 `;
                }
                htmlContent += `
                            </select>
                        </div>
                        <div>
                            <button class="edit-delete-group btn"  data-group-id="${modifierGroupId}">
                                <i class="bi bi-trash"></i>
                            </button>
                            <select class="edit-modifier-qty editQuantityMax form-select"  id="MaximumValue">
                            `;
                for (let i = 1; i <= 3; i++) {
                    htmlContent +=
                        `
                                <option value="${i}" ${maxValue == i ? 'selected' : ''}>${i}</option>
                                 `;
                }
                htmlContent += `
                            </select>
                        </div>
                    </div>
                    <div class="modifier-items">
                    `

                data.forEach(modifier => {
                    htmlContent +=
                        `<div class="modifier-item d-flex justify-content-between">
                                <div>${modifier.modifierItemName}</div>
                                <div>
                                <span class="modifier-price">â‚¹${modifier.rate}</span>
                                </div>
                            </div>`;
                });

                htmlContent +=
                    `</div>
                </div>`;
                document.querySelector("#editModifierContainer").insertAdjacentHTML('beforeend', htmlContent);
            },
            error: function () {

                toastr.error("Error loading modifiers.");
            }
        })
    }

    @* Category List end *@



        @* CheckConstrians start *@

        @* $(document).on("change", "#AddCategoryName", function () {
        
        let url = '@Url.Action("CheckConstrians", "Menu")';
        checkConstrains(url = url, data = { "name": "category", "value": $(this).val() }, elementid = "#checkConstrains");
    }); *@
        @* $(document).on("change", "#new_category", function () {
        let url = '@Url.Action("CheckConstrians", "Menu")';
        checkConstrains(url = url, data = { "name": "category", "value": $(this).val() }, elementid = "#new_categoryvalidate");
    }); *@

        @* CheckConstrians end *@

</script>