@model PizzaShop.Entity.ViewModel.PaginationViewModel<PizzaShop.Entity.ViewModel.UserlistViewModel>
@using System.Text.Json
@using AuthenticationDemo.Utils
@using PizzaShop.Entity.Models
@{
    string? DataJson = Context.Request.Cookies["SuperSecretAuthToken"];
    User? currentUser = null;
    string? Email = null;

    if (!string.IsNullOrEmpty(DataJson))
    {
        try
        {
            currentUser =  CookieUtils.DecodeToken(DataJson);
            Email = currentUser?.Email;
        }
        catch
        {

        }
    }
}

<div class="table-responsive p-4 tile ">
    <table class="table table-bordered align-middle ">
        <thead>

            <tr>
            <th onclick="sortTable('Name')" id="NameColumn">
                Name
                <a href="javascript:void(0);">
                    <span id="name-sort-icon">
                        @if (Model.sortColumn == "Name")
                        {
                            <i class="@(Model.sortOrder == "asc" 
                                ? "bi bi-arrow-up text-black h5" 
                                : "bi bi-arrow-down text-black h5")"></i>
                        }
                        else
                        {
                            <i class="bi bi-arrow-left-right text-black h5" style="transform: rotate(90deg); display: inline-block;"></i>
                        }
                    </span>
                </a>
            </th>
            
                <th scope="col">Email</th>
                <th scope="col">Phone</th>
              <th style="cursor: pointer;" onclick="sortTable('Role')" id="RoleColumn">
                Role
                <a href="javascript:void(0);">
                    <span id="role-sort-icon">
                        @if (Model.sortColumn == "Role")
                        {
                            <small><i class="@(Model.sortOrder == "asc" 
                                ? "bi bi-arrow-up text-black h5" 
                                : "bi bi-arrow-down text-black h5")"></i></small>
                        }
                        else
                        {
                            <small><i class="bi bi-arrow-left-right text-black h5" style="transform: rotate(90deg); display: inline-block;"></i></small>
                        }
                    </span>
                </a>
            </th> 
                <th scope="col">Status</th>
                @if((bool)Context.Items["CanAddEdit"] == true || (bool)Context.Items["CanDelete"] == true)
                {
                <th scope="col">Action</th>
                }
            </tr>
        </thead>
        <tbody>
            @if(@Model.Items.Count == 0)
            {
                <tr>
                    <td colspan="6" class="text-center">No Users Found</td>
                </tr>
            }
            @foreach (var item in @Model.Items)
            {
                <tr>
                    <td class="d-flex gap-2 align-items-center">
                        <div>
                            @if (item.Imgurl == null)
                            {
                                <img src="~/images/Default_pfp.svg.png" class="rounded-circle" alt="pic" width="40px" height="40px">
                            }
                            else
                            {
                                <img src="~/@item.Imgurl" class="rounded-circle" alt="pic" width="40px" height="40px">
                            }
                        </div>
                        <span>@item.FirstName @item.LastName</span>

                    </td>
                    <td>@item.Email</td>

                    <td>@item.Phone</td>
                    <td>@item.RoleName</td>
                    <td class="">
                        @if (@item.Status == true)
                        {
                            <span class="btn btn-sm bg-success text-white">Active</span>
                        }
                        else
                        {
                            <span class="btn btn-sm bg-danger text-white">Inactive</span>
                        }
                    </td>
                    @if((bool)Context.Items["CanAddEdit"] == true || (bool)Context.Items["CanDelete"] == true)
                {

                    <td class="d-flex">
                    @if(Email != item.Email){
                        @if((bool)Context.Items["CanAddEdit"] == true){

                        <form asp-action="EditUser" asp-controller="Users" method="get">
                            <input type="hidden" name="email" value="@item.Email">
                            <input type="hidden" name="Name" value="@item.FirstName">
                            <button type="submit" class="btn" id="editBtn">
                                <i class="bi bi-pencil"></i>
                            </button>
                        </form>
                        }
                        @if((bool)Context.Items["CanDelete"] == true){
                        <button type="button" class="btn openmodel" data-bs-toggle="modal" data-bs-target="#exampleModal"
                            data-id="@item.Email" id="deleteBtn">
                            <i class="bi bi-trash"></i>
                        </button>
                        }
                    }
                    </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @if(@Model.Items.Count != 0)
            {
        <div class="d-flex flex-wrap align-items-center justify-content-end"></div>
            <div class="d-flex justify-content-end align-items-center w-100">
                <div>
                <span class="w-auto">Items Per page: </span>
                </div>
                <div class="d-flex align-items-center flex-row">
                <select class="form-select ms-2 page-list" asp-for="PageSize" onchange="paginationTable()">
                    <option value="2" selected="@((Model.PageSize == 2) ? "selected" : null)">2</option>
                    <option value="5" selected="@((Model.PageSize == 5) ? "selected" : null)">5</option>
                    <option value="10" selected="@((Model.PageSize == 10) ? "selected" : null)">10</option>
                    <option value="15" selected="@((Model.PageSize == 15) ? "selected" : null)">15</option>
                </select>
                </div>
                <div class="ms-3">
                    <span>
                        Showing 
                        <span id="startUser">@((Model.CurrentPage - 1) * Model.PageSize + 1)</span> -
                        <span id="endUser">@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems)</span> of
                        <span id="totalUser">@Model.TotalItems</span>   
                    </span>
                </div>
                <div class="m-2">
                <button class="page-link btn" type="button" id="prev"  onclick="pageChange('prev')" @(Model.CurrentPage
                                    == 1 ? "disabled" : "") aria-label="Previous" id="previous_page">

                <i class="fa-solid fa-backward" aria-hidden="true"></i>
                </button>
                </div>
                <div class="m-2">
                    <button class="page-link btn" type="button" id="next" onclick="pageChange('next')" @((Model.CurrentPage
                                    *Model.PageSize >= Model.TotalItems) ? "disabled" : "") aria-label="Next" id="next_page">
                        <i class="fa-solid fa-forward" aria-hidden="true"></i>
                    </button>
                </div>
            </div>
        }
        </div>
</div>

<script>

        function sortTable(column) {

            const existingIndex = sortStates.findIndex(entry => entry.sortColumn === column);

            if (existingIndex >= 0) {
              
                sortStates[existingIndex].sortOrder =
                    sortStates[existingIndex].sortOrder === "asc" ? "desc" : "asc";

               
                const [updatedState] = sortStates.splice(existingIndex, 1);
                sortStates.unshift(updatedState); 
            } else {
                
                const newState = {
                    sortColumn: column,
                    sortOrder: "asc"
                };

               
                if (sortStates.length > 0) {
                    
                    sortStates.splice(1, 0, newState);
                } else {
                   
                    sortStates.push(newState);
                }
            }

            const { sortColumn, sortOrder } = sortStates[0];

            
            fetchUserList(currentPage, pageSize, search, sortColumn, sortOrder);

            
            console.log("Current sort states:", sortStates);
        }


    function paginationTable() {
        var value =parseInt($("#PageSize").val());

        pageSize = value;
        let totalPages = Math.ceil(@Model.TotalItems / pageSize);
        if (currentPage > totalPages) {
            currentPage = totalPages > 0 ? totalPages : 1;
        }
        fetchUserList(currentPage, pageSize, search,sortColumn,sortOrder)
    }

    function pageChange(pageAction) {

        if (pageAction == 'prev') {
            currentPage = currentPage === 1 ? 1 : --currentPage;
        }
        else {
            currentPage = (currentPage * pageSize) > @Model.TotalItems ? currentPage : ++currentPage;
        }
        fetchUserList(currentPage, pageSize, search,sortColumn,sortOrder="asc")
    }
</script>