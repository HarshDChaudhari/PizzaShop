@model PizzaShop.Entity.ViewModel.MenuViewModel
@{
    ViewData["Title"] = "Menu Page";
}
<style>
    .list-modGroup-item-action #modifierBtn {
        visibility: hidden;
    }

    .list-modGroup-item-action {
        cursor: pointer;
        font: 1.2em sans-serif;
    }

    .list-modGroup-item-action:hover {
        background-color: #f0f0f0;
        border-radius: 5px;
    }

    .list-modGroup-item-action.active {
        background-color: rgba(40, 46, 46, 0.157);
        color: #0F67B1;
        font-weight: 500;
    }

    .list-modGroup-item-action.active #modifierBtn {
        visibility: visible;
    }

    .list-modGroup-item-action.active #modifierBtn button {
        color: #0F67B1;
    }
    .scrollbar {
    max-height: 400px;
    overflow-y: auto;  
    padding-right: 10px; 
}

</style>
<div class="row">
    <div class=" d-block rounded col-lg-3 col-md-12 bg-white"> <!-- style="width: 240px;" -->
        <div class="pt-2 d-flex align-items-center justify-content-center mx-4 mb-2">
            <h4 id="modifier-header">Modifier</h4>
            @if((bool)Context.Items["CanAddEdit"]){
            <a class="btn blue-outline d-flex align-items-center" data-bs-target="#AddModifier" data-bs-toggle="modal">
                <h3><i class="bi bi-plus"></i></h3>
            </a>
            }

        </div>
        <div class="overflow-auto scrollbar">
            <ul class="tab-nav d-flex flex-lg-column gap-3 p-3" id="myTab" role="tablist"
                style="list-style-type: none;">
                @foreach (var item in Model.ModifierList)
                {
                    <li class="mb-2 parent d-flex gap-2 list-modGroup-item-action p-3"
                        id="modifier-items-@item.ModifierGroupId">
                        <span class="modifier-item ModifierParent" data-modifier-id="@item.ModifierGroupId"
                            style="cursor: pointer;">@item.ModifierName</span>
                        <div class="gap-3 d-flex notvisible" id="modifierBtn">
                            @if((bool)Context.Items["CanAddEdit"]){
                            <button class="border-0 bg-transparent" data-bs-toggle="modal"
                                data-bs-target="#editModifierModal"
                                onclick="openEditModifierModal(@item.ModifierGroupId,'@item.ModifierName', '@item.Description')">
                                <i class="bi bi-pen  "></i></button>
                            }
                            @if((bool)Context.Items["CanDelete"]){
                            <button class="border-0 bg-transparent" data-bs-toggle="modal"
                                data-bs-target="#deleteModifierModal"
                                onclick="openDeleteModifierModal(@item.ModifierGroupId,'@item.ModifierName')">
                                <i class="bi bi-trash"></i>
                            </button>
                            }
                        </div>
                    </li>
                }
            </ul>

        </div>
    </div>
    <div class="col-lg-9 col-md-12">
        <div id="modifierItems"></div>
    </div>
</div>




@* Modal Start *@
<form method="post" asp-action="DeleteModifier" asp-controller="Menu">

    <input type="hidden" id="deleteModifierGroupId" asp-for="ModifierGroupId">

    <div class="modal fade" id="deleteModifierModal" data-bs-backdrop="delete" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="deleteBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="deleteBackdropLabel">
                        Delete Confirmation</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex align-items-center justify-content-center flex-column ">
                        <img src="~/images/toppng.com-warning-icon-2400x2400.png" height="50px" width="50px" alt="">
                    <div>
                        <p> Are you sure you want to delete <span id="deleteModifierName"></span>?</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Yes</button>
                </div>
            </div>
        </div>
    </div>
</form>

    <input type="hidden" name="selectedModifierName" id="selectedModifierName">
    <input type="hidden" name="selectedModifierIds" id="selectedModifierIds">
    <div class="modal fade" id="AddModifier" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">
                        Add Modifier Group</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

            <form method="post" asp-action="AddModifier" asp-controller="Menu" id="addModifierGroupForm">
                <div class="modal-body">
                    <div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="floatingInput" required placeholder="Name"
                                asp-for="ModifierName">
                            <label for="floatingInput">Name*</label>

                        </div>
                        <div class="form-floating">
                            <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea"
                                asp-for="DescriptionModifier"></textarea>
                            <label for="floatingTextarea">Description</label>
                        </div>
                        <button type="button"
                            class="border border-0 bg-white mt-3 text-primary addExistingModifier-btn ExistingModifiers">
                            + Add
                            Existing Modifier <span id="selectedModifiersCount">(0)</span></button>
                        <div id="ExistingModifiersList"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" id="btnsubmit" class="btn btn-primary">Save</button>
                </div>
</form>
            </div>
        </div>
    </div>



<div class="modal fade" id="editModifierModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Edit Modifier</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" id="EditModifierForm">
                <input type="hidden" data-modifier-id="ModifierGroupId" id="editModifierGroupId">
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="editModifierName" required>
                        <label for="editModifierName">Name*</label>
                    </div>
                    <div class="form-floating">
                        <textarea class="form-control" asp-for="DescriptionModifier"
                            id="editModifierDescription"></textarea>
                        <label for="editModifierDescription">Description</label>
                    </div>
                    <button type="button"
                        class="border border-0 bg-white mt-3 text-primary addExistingModifier-btn ExistingModifiers"> +
                        Add
                        Existing Modifier <span id="selectedModifiersCountEdit">(0)</span>
                    </button>
                    <div id="EditExistingModifiersList"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>

            </form>
        </div>
    </div>
</div>

<div id="ExistingModifierModal"></div>


@* Modal End *@

<script>

    $(function () {
        $('.ModifierParent').parent().first().addClass('active');
    });
    $(function () {
        $('.ModifierParent').on('click', function () {
            $('.ModifierParent').parent().removeClass('active');
            $(this).parent().addClass('active');
        });
    });

    function openDeleteModifierModal(ModifierGroupId, ModifierName) {
        document.getElementById('deleteModifierGroupId').value = ModifierGroupId;
        document.getElementById('deleteModifierName').textContent = ModifierName;

    }

    function openEditModifierModal(ModifierGroupId, ModifierName, Description) {
        
        document.getElementById('editModifierGroupId').value = ModifierGroupId;
        document.getElementById('editModifierName').value = ModifierName;
        document.getElementById('editModifierDescription').textContent = Description;
        updateSelectedModifiersDisplayEdit(ModifierGroupId)
    }


    $(".addExistingModifier-btn").on("click", function () {

        console.log("ExistingModifiers button clicked.........................")
        $.ajax({
            url: '/Menu/ExistingModifierModelShow',
            type: 'GET',
            success: function (data) {

                $("#ExistingModifierModal").html(data);
                fetchExistingModifierList(currentPage, pageSize, search);
                $('#ExistingModifier').modal('show');
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error, xhr);
            }
        });
    });
    var currentPageModifier = 1;
    var pageSizeModifier = 5;
    var search = "";
    var currentModifierId = null;

    function fetchModifierItems(ModifierGroupId, currentPageModifier, pageSizeModifier) {

        $.ajax({
            url: '/Menu/ModifierItems',
            type: 'GET',
            data: {
                ModifierGroupId: ModifierGroupId,
                page: currentPageModifier,
                pageSize: pageSizeModifier,
                search: search,
            },
            success: function (data) {
                $("#modifierItems").html(data);
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error);
                $('#modifierItems').html('<tr><td colspan="4">Error loading items.</td></tr>');
            }
        });

    }

    let isEditModal = false;
    let tempSelectedModifiers = [];
    let selectedModifiers = [];
    let selectedModifierIdsStore = [];
    let selectedExistingModifierEdit = [];
    let EditSelectedModifiers = [];
    let arr = [];


    $('#AddModifier').on('shown.bs.modal', function () {
        isEditModal = false;
    });

    $('#editModifierModal').on('shown.bs.modal', function () {
        isEditModal = true;
    });


    $(document).on('change', ':checkbox', function () {
        let itemId = $(this).data('id');
        let itemName = $(this).data('name');

        if ($(this).is(':checked')) {
            if (!tempSelectedModifiers.some(item => item.id === itemId)) {
                tempSelectedModifiers.push({ modifierItemId: itemId, modifierItemName: itemName });
            }
        } else {
            tempSelectedModifiers = tempSelectedModifiers.filter(item => item.id !== itemId);
        }
    });


    function updateSelectedModifiersDisplay() {
        document.getElementById('selectedModifiersCount').textContent = `(${selectedModifiers.length})`;
        let selectedHtml = '';

        if (selectedModifiers.length > 0) {
            selectedHtml = '<p>Selected Modifiers:</p><ul class="d-flex flex-wrap gap-3">';
            selectedModifiers.forEach(item => {
                selectedHtml += `
                <li class="d-flex border-2 border-dark me-2 p-2 gap-3" style="align-items: center; border: 1px solid #000; border-radius: 500px;">
                    ${item.modifierItemName} 
                    <span class=" text-danger" id="removeModifier" onclick="removeModifier(${item.modifierItemId})" data-item-id="${item.modifierItemId}" style="cursor:pointer;"> X </span>
                </li>`;
            });
            selectedHtml += '</ul>';
        } else {
            selectedHtml = '<p>No modifiers selected.</p>';
        }


        $('#ExistingModifiersList').html(selectedHtml);
    }

    function removeModifier(id) {

        selectedModifiers = selectedModifiers.filter(item => item.modifierItemId != id);
        updateSelectedModifiersDisplay();
    }

    

    function updateSelectedModifiersDisplayEditDisplay(EditSelectedModifiers) {
        
        document.getElementById('selectedModifiersCountEdit').textContent = `(${EditSelectedModifiers.length})`;
        let selectedHtml = '';


        if (EditSelectedModifiers.length > 0) {
            selectedHtml = '<p>Selected Modifiers:</p><ul class="d-flex flex-wrap gap-3">';
            EditSelectedModifiers.forEach(item => {
                selectedHtml += `
                <li data-item-name="${item.modifierItemName}" class="existingEditModifierName d-flex border-2 border-dark me-2 p-2 gap-3" style="align-items: center; border: 1px solid #000; border-radius: 500px;">
                    ${item.modifierItemName} 
                    <span  class="removeModifierEdit existingEditModifierId text-danger" data-item-id="${item.modifierItemId}" style="cursor:pointer;"> X </span>
                </li>`;
            });
            selectedHtml += '</ul>';

        } else {
            selectedHtml = '<p>No modifiers selected.</p>';
        }

        $('#EditExistingModifiersList').html(selectedHtml);

        EditSelectedModifiers = EditSelectedModifiers.map(item => ({
            modifierItemId: item.modifierItemId,
            modifierItemName: item.modifierItemName
        }));


    }

    $('#EditExistingModifiersList').on("click", ".removeModifierEdit", function () {

        let itemId = $(this).data('item-id');
        arr = arr.filter(item => item.modifierItemId != itemId);
        selectedModifiers = selectedModifiers.filter(item => item.modifierItemId != itemId);
        updateSelectedModifiersDisplayEditDisplay(arr);
    });

    // Form submission handler
    $(document).on("submit", "#existingModifierItemForm", function (event) {

        event.preventDefault();

        selectedModifiers = [...tempSelectedModifiers];

        if (isEditModal) {

            let ModifierGroupId = $('#editModifierGroupId').val();

            arr = [...EditSelectedModifiers, ...selectedModifiers.map(item => ({
                modifierItemId: item.modifierItemId,
                modifierItemName: item.modifierItemName
            }))];
            updateSelectedModifiersDisplayEditDisplay(arr);
        } else {

            updateSelectedModifiersDisplay();
        }


        $('#ExistingModifier').modal('hide');


    });
    $(document).on("submit", "#EditModifierForm", function (event) {
        event.preventDefault()
        selectedExistingModifierEdit = [];


        $(".existingEditModifierName").each(function (index) {
            var ModifierItemName = $(this).data("item-name");
            var ModifierItemId = $(".existingEditModifierId").eq(index).data("item-id");

            selectedExistingModifierEdit.push({
                ModifierItemName: ModifierItemName,
                ModifierItemId: ModifierItemId
            });
        });

        var ModifierGroupId = $('#editModifierGroupId').val();
        var ModifierName = $('#editModifierName').val();
        var DescriptionModifier = $('#editModifierDescription').val();


        var formData = {
            ModifierGroupId: ModifierGroupId,
            ModifierName: ModifierName,
            DescriptionModifier: DescriptionModifier
        }

        if (selectedExistingModifierEdit && selectedExistingModifierEdit.length > 0) {
            formData["SelectedModifierList"] = selectedExistingModifierEdit;
        }

        console.log(selectedExistingModifierEdit);

        $.ajax({
            url: '/Menu/EditModifier',
            type: 'POST',
            data: formData,
            success: function (data) {

                $("#editModifierModal").hide();
                window.location.reload();
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error, xhr);
            }

        });

    });

    // Add Modifier Group form submit (ensure selected modifiers are passed correctly)
    $('#addModifierGroupForm').submit(function (e) {
        e.preventDefault()
        let selectedIds = selectedModifiers.map(item => item.modifierItemId);
        let selectedNames = selectedModifiers.map(item => item.modifierItemName);

        $('#selectedModifierIds').val(selectedIds.join(','));
        $('#selectedModifierName').val(selectedNames.join(','));
    });

    // Document ready for the modifier item click handler
    $(document).ready(function () {
        $('.modifier-item').click(function () {
            var ModifierGroupId = $(this).data('modifier-id');
            if (ModifierGroupId) {
                fetchModifierItems(ModifierGroupId, currentPageModifier, pageSizeModifier, search);
            } else {
                console.error("ModifierGroup ID is undefined.");
            }
        });

        const firstModifierLink = document.querySelector('.modifier-item');
        if (firstModifierLink) {
            const firstModifierId = firstModifierLink.getAttribute('data-modifier-id');
            currentModifierId = firstModifierId;
            fetchModifierItems(firstModifierId, currentPageModifier, pageSizeModifier, search);
        }
    });

</script>