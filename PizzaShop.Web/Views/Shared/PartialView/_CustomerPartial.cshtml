  @model PizzaShop.Entity.ViewModel.PaginationViewModel<PizzaShop.Entity.ViewModel.CustomerViewModel>


<div  class="" id="Body">


<table class="table ">
    <thead class="border-dark">
        <th style="cursor: pointer;" scope="col" onclick="sortTableCustomer('CustomerName')">Name
            <a href="javascript:void(0);">
                    <span>
                        @if (Model.sortColumn == "CustomerName")
                        {
                            <small><i class="@(Model.sortOrder == "asc" 
                                ? "bi bi-arrow-up text-black h5" 
                                : "bi bi-arrow-down text-black h5")"></i></small>
                        }
                        else
                        {
                            <small><i class="bi bi-arrow-left-right text-black h5" style="transform: rotate(90deg); display: inline-block;"></i></small>
                        }
                    </span>
                </a>
        </th>
        <th scope="col">Email
        </th>
        <th scope="col">Phone
        </th>
        <th style="cursor: pointer;" scope="col" onclick="sortTableCustomer('Date')">Date
            <a href="javascript:void(0);">
                    <span>
                        @if (Model.sortColumn == "Date")
                        {
                            <small><i class="@(Model.sortOrder == "asc" 
                                ? "bi bi-arrow-up text-black h5" 
                                : "bi bi-arrow-down text-black h5")"></i></small>
                        }
                        else
                        {
                            <small><i class="bi bi-arrow-left-right text-black h5" style="transform: rotate(90deg); display: inline-block;"></i></small>
                        }
                    </span>
                </a>
        </th>
        <th scope="col">TotalOrder</th>
       
    </thead>
    <tbody >
        @if (Model.Items != null && Model.Items.Any())
        {
            @foreach (var customer in Model.Items)
            {
                <tr data-id="@customer.CustomerId" class="cursor-pointer" onclick="showCustomerDetailsModal(@customer.CustomerId)">
                    <td>@customer.CustomerName</td>
                    <td>@customer.Email</td>
                    <td>@customer.Phone</td>
                    <td>@customer.Date</td>
                    <td>@customer.TotalOrder</td>
                </tr>
            }
            <tr>
                        <td class="border-0" colspan="10">
                            <div class="d-flex align-content-center align-items-center justify-content-end">
                            <span>Items Per page: </span>
                            <div class="d-flex justify-content-end align-items-center">
                                <div>
                                <select class="form-select ms-2 page-list" id="orderTableSizeSelect" asp-for="PageSize" onchange="paginationTable()">
                                    <option value="2" selected="@((Model.PageSize == 2) ? "selected" : null)">2</option>
                                    <option value="5" selected="@((Model.PageSize == 5) ? "selected" : null)">5</option>
                                    <option value="10" selected="@((Model.PageSize == 10) ? "selected" : null)">10</option>
                                    <option value="15" selected="@((Model.PageSize == 15) ? "selected" : null)">15</option>
                                </select>
                                </div>
                                <div class="ms-3">
                                    <span>
                                        Showing 
                                        <span id="startUser">@((Model.CurrentPage - 1) * Model.PageSize + 1)</span> -
                                        <span id="endUser">@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems)</span> of
                                        <span id="totalUser">@Model.TotalItems</span>   
                                    </span>
                                </div>
                                <div class="m-2">
                                <button class="page-link btn" type="button" id="prev"  onclick="pageChange('prev')" @(Model.CurrentPage
                                                    == 1 ? "disabled" : "") aria-label="Previous" id="previous_page">
                                    <i class="fa-solid fa-backward" aria-hidden="true"></i>
                                </button>
                                </div>
                                <div class="m-2">
                                    <button class="page-link btn" type="button" id="next" onclick="pageChange('next')" @((Model.CurrentPage
                                                    *Model.PageSize >= Model.TotalItems) ? "disabled" : "") aria-label="Next" id="next_page">
                                        <i class="fa-solid fa-forward" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>
                            </div>
                        </td>
                    </tr>
        }
        else
        {
            <tr>
                <td colspan="12" class="text-center">No records found</td>
            </tr>
        }

    </tbody>
</table>

    
</div>
<div  id="CustomerDetailsModal"></div> 

<script>
    function sortTableCustomer(column) {

            const existingIndex = sortStates.findIndex(entry => entry.sortColumn === column);

            if (existingIndex >= 0) {
              
                sortStates[existingIndex].sortOrder =
                    sortStates[existingIndex].sortOrder === "asc" ? "desc" : "asc";

               
                const [updatedState] = sortStates.splice(existingIndex, 1);
                sortStates.unshift(updatedState); 
            } else {
                
                const newState = {
                    sortColumn: column,
                    sortOrder: "asc"
                };

               
                if (sortStates.length > 0) {
                    
                    sortStates.splice(1, 0, newState);
                } else {
                   
                    sortStates.push(newState);
                }
            }

            const { sortColumn, sortOrder } = sortStates[0];

            
            
            fetchCustomer(currentPage, pageSize, search, customerTime,sortColumn, sortOrder);

            
            console.log("Current sort states:", sortStates);
        }
      function paginationTable() {
        var value =parseInt($("#orderTableSizeSelect").val());
        pageSize = value;
        let totalPages = Math.ceil(@Model.TotalItems / pageSize);
        if (currentPage > totalPages) {
            currentPage = totalPages > 0 ? totalPages : 1;
        }
        fetchCustomer(currentPage, pageSize, search, customerTime,sortCustomerColumn, sortCustomerOrder);
    }


    function pageChange(pageAction) {

        if (pageAction == 'prev') {
            currentPage = currentPage === 1 ? 1 : --currentPage;
        }
        else {
            currentPage = (currentPage * pageSize) > @Model.TotalItems ? currentPage : ++currentPage;
        }
        fetchCustomer(currentPage, pageSize, search, customerTime,sortCustomerColumn, sortCustomerOrder);
    }

    function showCustomerDetailsModal(customerId) {
    
        $.ajax({
            url: '/Customers/GetCustomerHistory',
            type: 'GET',
            data: {
                customerId: customerId
            },
            success: function (response) {
              
                $('#CustomerDetailsModal').html(response);
                $('#modalCustomerHistory').modal('show');
            },
            error: function (xhr, status, error) {
                toastr.error('Error loading items.');
            }
        });
    }

    $(document).ready(function () {
    });
</script>